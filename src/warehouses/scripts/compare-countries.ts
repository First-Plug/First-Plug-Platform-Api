import { countryCodes } from '../../shipments/helpers/countryCodes';

// PEGA AQU√ç LA LISTA DEL FRONTEND
const frontendCountries: Record<string, string> = {
  // Cuando tengas la lista del frontend, p√©gala aqu√≠
  // Por ejemplo:
  // "Argentina": "AR",
  // "Brasil": "BR",
  // etc...
};

/**
 * Script para comparar pa√≠ses del backend vs frontend
 * y encontrar los que faltan, manejando duplicados inteligentemente
 */

function compareCountries() {
  console.log('üîç Comparing backend vs frontend countries...\n');

  // Obtener listas
  const backendCountries = Object.keys(countryCodes);
  const frontendCountriesList = Object.keys(frontendCountries);

  console.log(`üìä Backend countries: ${backendCountries.length}`);
  console.log(`üìä Frontend countries: ${frontendCountriesList.length}\n`);

  // Crear mapas por c√≥digo de pa√≠s para detectar duplicados
  const backendByCodes = new Map<string, string[]>();
  const frontendByCodes = new Map<string, string[]>();

  // Agrupar backend por c√≥digos
  backendCountries.forEach((country) => {
    const code = countryCodes[country];
    if (!backendByCodes.has(code)) {
      backendByCodes.set(code, []);
    }
    backendByCodes.get(code)!.push(country);
  });

  // Agrupar frontend por c√≥digos
  frontendCountriesList.forEach((country) => {
    const code = frontendCountries[country];
    if (!frontendByCodes.has(code)) {
      frontendByCodes.set(code, []);
    }
    frontendByCodes.get(code)!.push(country);
  });

  console.log('üîç AN√ÅLISIS POR C√ìDIGOS DE PA√çS:\n');

  // C√≥digos que est√°n en frontend pero no en backend
  const missingCodesInBackend = Array.from(frontendByCodes.keys()).filter(
    (code) => !backendByCodes.has(code),
  );

  // C√≥digos que est√°n en backend pero no en frontend
  const missingCodesInFrontend = Array.from(backendByCodes.keys()).filter(
    (code) => !frontendByCodes.has(code),
  );

  console.log(
    `‚ùå C√ìDIGOS FALTANTES EN BACKEND (${missingCodesInBackend.length}):`,
  );
  missingCodesInBackend.forEach((code) => {
    const countries = frontendByCodes.get(code)!;
    console.log(`   ${code}: ${countries.join(', ')}`);
  });

  console.log(
    `\n‚ùå C√ìDIGOS FALTANTES EN FRONTEND (${missingCodesInFrontend.length}):`,
  );
  missingCodesInFrontend.forEach((code) => {
    const countries = backendByCodes.get(code)!;
    console.log(`   ${code}: ${countries.join(', ')}`);
  });

  console.log('\nüîç AN√ÅLISIS DE DUPLICADOS:\n');

  console.log('üìã BACKEND - C√≥digos con m√∫ltiples nombres:');
  Array.from(backendByCodes.entries())
    .filter(([_, countries]) => countries.length > 1)
    .forEach(([code, countries]) => {
      console.log(`   ${code}: ${countries.join(', ')}`);
    });

  console.log('\nüìã FRONTEND - C√≥digos con m√∫ltiples nombres:');
  Array.from(frontendByCodes.entries())
    .filter(([_, countries]) => countries.length > 1)
    .forEach(([code, countries]) => {
      console.log(`   ${code}: ${countries.join(', ')}`);
    });

  console.log('\nüîç PA√çSES √öNICOS PARA WAREHOUSES:\n');

  // Para warehouses, usar solo un pa√≠s por c√≥digo
  const uniqueCountriesForWarehouses = new Map<string, string>();

  // Priorizar versiones en ingl√©s sin acentos
  const priorityOrder = (country: string): number => {
    if (
      country.includes('√°') ||
      country.includes('√©') ||
      country.includes('√≠') ||
      country.includes('√≥') ||
      country.includes('√∫') ||
      country.includes('√±')
    )
      return 3;
    if (country === 'Brasil' || country === 'M√©xico' || country === 'Per√∫')
      return 2;
    if (country === 'USA' || country === 'UK') return 1;
    return 0;
  };

  // Combinar todos los c√≥digos √∫nicos
  const allUniqueCodes = new Set([
    ...Array.from(backendByCodes.keys()),
    ...Array.from(frontendByCodes.keys()),
  ]);

  allUniqueCodes.forEach((code) => {
    const backendOptions = backendByCodes.get(code) || [];
    const frontendOptions = frontendByCodes.get(code) || [];
    const allOptions = [...backendOptions, ...frontendOptions];

    // Elegir la mejor opci√≥n (ingl√©s sin acentos)
    const bestOption = allOptions.sort(
      (a, b) => priorityOrder(a) - priorityOrder(b),
    )[0];
    uniqueCountriesForWarehouses.set(code, bestOption);
  });

  console.log(
    `üì¶ Pa√≠ses √∫nicos para crear warehouses: ${uniqueCountriesForWarehouses.size}`,
  );
  console.log('Ejemplos:');
  Array.from(uniqueCountriesForWarehouses.entries())
    .slice(0, 10)
    .forEach(([code, country]) => {
      console.log(`   ${code}: ${country}`);
    });

  console.log(`\nüìà RESUMEN:`);
  console.log(`   - C√≥digos √∫nicos totales: ${allUniqueCodes.size}`);
  console.log(
    `   - C√≥digos faltantes en backend: ${missingCodesInBackend.length}`,
  );
  console.log(
    `   - C√≥digos faltantes en frontend: ${missingCodesInFrontend.length}`,
  );
  console.log(`   - Warehouses a crear: ${uniqueCountriesForWarehouses.size}`);

  return {
    missingCodesInBackend,
    missingCodesInFrontend,
    uniqueCountriesForWarehouses: Array.from(
      uniqueCountriesForWarehouses.entries(),
    ),
    totalUniqueCodes: allUniqueCodes.size,
  };
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  compareCountries();
}

export { compareCountries };
