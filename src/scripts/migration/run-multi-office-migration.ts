import { runMultiOfficeMigration } from './multi-office-migration';
import { runMultiOfficeValidation } from '../validation/multi-office-validation';

/**
 * Script principal para ejecutar la migraci√≥n completa Multi-Office
 * 
 * Este script ejecuta:
 * 1. Migraci√≥n de datos existentes
 * 2. Validaci√≥n de integridad post-migraci√≥n
 * 3. Reporte final de resultados
 */
async function runCompleteMigration() {
  console.log('üöÄ Iniciando migraci√≥n completa Multi-Office...\n');
  
  const startTime = Date.now();
  
  try {
    // 1. Ejecutar migraci√≥n
    console.log('üìã FASE 1: MIGRACI√ìN DE DATOS');
    console.log('=' .repeat(50));
    await runMultiOfficeMigration();
    
    console.log('\n‚è≥ Esperando 2 segundos antes de la validaci√≥n...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 2. Ejecutar validaci√≥n
    console.log('\nüìã FASE 2: VALIDACI√ìN DE INTEGRIDAD');
    console.log('=' .repeat(50));
    await runMultiOfficeValidation();
    
    // 3. Reporte final
    const endTime = Date.now();
    const duration = Math.round((endTime - startTime) / 1000);
    
    console.log('\nüìã MIGRACI√ìN COMPLETA FINALIZADA');
    console.log('=' .repeat(50));
    console.log(`‚è±Ô∏è Tiempo total: ${duration} segundos`);
    console.log('üéâ Migraci√≥n Multi-Office completada exitosamente!');
    console.log('\nüìù PR√ìXIMOS PASOS:');
    console.log('1. Verificar que no hay inconsistencias reportadas');
    console.log('2. Probar funcionalidad multi-office en desarrollo');
    console.log('3. Ejecutar tests unitarios e integraci√≥n');
    console.log('4. Desplegar en staging para pruebas adicionales');
    
  } catch (error) {
    console.error('\n‚ùå Error durante la migraci√≥n completa:', error);
    console.log('\nüîß ACCIONES RECOMENDADAS:');
    console.log('1. Revisar logs de error detallados');
    console.log('2. Verificar conectividad a base de datos');
    console.log('3. Asegurar que todos los tenants tienen oficina default');
    console.log('4. Ejecutar migraci√≥n manualmente por tenant si es necesario');
    process.exit(1);
  }
}

// Ejecutar migraci√≥n completa si se llama directamente
if (require.main === module) {
  runCompleteMigration()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Error ejecutando migraci√≥n completa:', error);
      process.exit(1);
    });
}

export { runCompleteMigration };
